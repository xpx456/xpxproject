package com.accesscontrol.model.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VEIN_DYNAMIC".
*/
public class VeinDynamicDao extends AbstractDao<VeinDynamic, Long> {

    public static final String TABLENAME = "VEIN_DYNAMIC";

    /**
     * Properties of entity VeinDynamic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FingerIndex = new Property(1, String.class, "fingerIndex", false, "FINGER_INDEX");
        public final static Property Feat = new Property(2, String.class, "feat", false, "FEAT");
        public final static Property UserId = new Property(3, String.class, "userId", false, "USER_ID");
        public final static Property Index = new Property(4, Integer.class, "index", false, "INDEX");
        public final static Property GroupId = new Property(5, String.class, "groupId", false, "GROUP_ID");
        public final static Property CreateTime = new Property(6, String.class, "createTime", false, "CREATE_TIME");
    }


    public VeinDynamicDao(DaoConfig config) {
        super(config);
    }
    
    public VeinDynamicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VEIN_DYNAMIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FINGER_INDEX\" TEXT," + // 1: fingerIndex
                "\"FEAT\" TEXT," + // 2: feat
                "\"USER_ID\" TEXT," + // 3: userId
                "\"INDEX\" INTEGER," + // 4: index
                "\"GROUP_ID\" TEXT," + // 5: groupId
                "\"CREATE_TIME\" TEXT);"); // 6: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VEIN_DYNAMIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VeinDynamic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fingerIndex = entity.getFingerIndex();
        if (fingerIndex != null) {
            stmt.bindString(2, fingerIndex);
        }
 
        String feat = entity.getFeat();
        if (feat != null) {
            stmt.bindString(3, feat);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        Integer index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(5, index);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(6, groupId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(7, createTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VeinDynamic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fingerIndex = entity.getFingerIndex();
        if (fingerIndex != null) {
            stmt.bindString(2, fingerIndex);
        }
 
        String feat = entity.getFeat();
        if (feat != null) {
            stmt.bindString(3, feat);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        Integer index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(5, index);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(6, groupId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(7, createTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VeinDynamic readEntity(Cursor cursor, int offset) {
        VeinDynamic entity = new VeinDynamic( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fingerIndex
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // feat
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // index
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // groupId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VeinDynamic entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFingerIndex(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFeat(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIndex(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setGroupId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VeinDynamic entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VeinDynamic entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VeinDynamic entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
